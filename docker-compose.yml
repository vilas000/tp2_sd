version: '3.8' 

services:
  # --- Serviços do Cluster Store (NOVOS) ---
  store_node_1:
    build: ./cluster_store_app
    hostname: store_node_1
    networks:
      - my_distributed_net
    ports:
      - "20001:20001"
    environment:
      NODE_ID: Store_1
      NODE_PORT: 20001
      PRIMARY_NODE_ID: Store_1
      CLUSTER_STORE_PEERS: Store_1:store_node_1:20001,Store_2:store_node_2:20002,Store_3:store_node_3:20003
      NODE_PORT_1: 20001 # Portas explícitas para descoberta
      NODE_PORT_2: 20002
      NODE_PORT_3: 20003
      PYTHONUNBUFFERED: 1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('localhost', 20001)); s.close()"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s


  store_node_2:
    build: ./cluster_store_app
    hostname: store_node_2
    networks:
      - my_distributed_net
    ports:
      - "20002:20002"
    environment:
      NODE_ID: Store_2
      NODE_PORT: 20002
      PRIMARY_NODE_ID: Store_1
      CLUSTER_STORE_PEERS: Store_1:store_node_1:20001,Store_2:store_node_2:20002,Store_3:store_node_3:20003
      NODE_PORT_1: 20001
      NODE_PORT_2: 20002
      NODE_PORT_3: 20003
      PYTHONUNBUFFERED: 1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('localhost', 20002)); s.close()"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s

  store_node_3:
    build: ./cluster_store_app
    hostname: store_node_3
    networks:
      - my_distributed_net
    ports:
      - "20003:20003"
    environment:
      NODE_ID: Store_3
      NODE_PORT: 20003
      PRIMARY_NODE_ID: Store_1
      CLUSTER_STORE_PEERS: Store_1:store_node_1:20001,Store_2:store_node_2:20002,Store_3:store_node_3:20003
      NODE_PORT_1: 20001
      NODE_PORT_2: 20002
      NODE_PORT_3: 20003
      PYTHONUNBUFFERED: 1
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('localhost', 20003)); s.close()"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s

  # --- Serviços do Cluster Sync ---
  sync_peer_1:
    build: ./cluster_sync_app # Usando a imagem do Cluster Sync
    hostname: sync_peer_1 # Nome do host para o primeiro peer
    environment: 
      PEER_ID: Peer_1 # ID do peer
      PEER_PORT: 12345 # Porta do peer
      PYTHONUNBUFFERED: 1 # Variável de ambiente para garantir que a saída do Python seja exibida em tempo real
      CLUSTER_STORE_PEERS: store_node_1:20001,store_node_2:20002,store_node_3:20003 # <-- NOVA VAR

    ports:
      - "12345:12345" # Mapeando a porta do peer para a porta do host
    networks:
      - my_distributed_net # Conectando ao network bridge
    restart: unless-stopped # Reiniciar o serviço a menos que seja parado manualmente
    healthcheck: # Teste de saúde para garantir que o serviço esteja funcionando corretamente
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('localhost', 12345)); s.close()"] # Teste de saúde usando um comando Python para verificar a conectividade
      interval: 5s # Intervalo entre os testes de saúde
      timeout: 3s # Tempo limite para o teste de saúde
      retries: 5 # Número de tentativas antes de considerar o serviço como não saudável
      start_period: 20s # Período de espera antes de iniciar o teste de saúde
    depends_on: 
      store_node_1:
        condition: service_healthy
      store_node_2:
        condition: service_healthy
      store_node_3:
        condition: service_healthy

  sync_peer_2:
    build: ./cluster_sync_app
    hostname: sync_peer_2
    environment:
      PEER_ID: Peer_2
      PEER_PORT: 12346
      PYTHONUNBUFFERED: 1
      CLUSTER_STORE_PEERS: store_node_1:20001,store_node_2:20002,store_node_3:20003
    ports:
      - "12346:12346"
    networks:
      - my_distributed_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('localhost', 12346)); s.close()"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s
    depends_on: 
      store_node_1:
        condition: service_healthy
      store_node_2:
        condition: service_healthy
      store_node_3:
        condition: service_healthy

  sync_peer_3:
    build: ./cluster_sync_app
    hostname: sync_peer_3
    environment:
      PEER_ID: Peer_3
      PEER_PORT: 12347
      PYTHONUNBUFFERED: 1
      CLUSTER_STORE_PEERS: store_node_1:20001,store_node_2:20002,store_node_3:20003
    ports:
      - "12347:12347"
    networks:
      - my_distributed_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('localhost', 12347)); s.close()"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s
    depends_on: 
      store_node_1:
        condition: service_healthy
      store_node_2:
        condition: service_healthy
      store_node_3:
        condition: service_healthy

  sync_peer_4:
    build: ./cluster_sync_app
    hostname: sync_peer_4
    environment:
      PEER_ID: Peer_4
      PEER_PORT: 12348
      PYTHONUNBUFFERED: 1
      CLUSTER_STORE_PEERS: store_node_1:20001,store_node_2:20002,store_node_3:20003
    ports:
      - "12348:12348"
    networks:
      - my_distributed_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('localhost', 12348)); s.close()"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s
    depends_on: 
      store_node_1:
        condition: service_healthy
      store_node_2:
        condition: service_healthy
      store_node_3:
        condition: service_healthy

  sync_peer_5:
    build: ./cluster_sync_app
    hostname: sync_peer_5
    environment:
      PEER_ID: Peer_5
      PEER_PORT: 12349
      PYTHONUNBUFFERED: 1
      CLUSTER_STORE_PEERS: store_node_1:20001,store_node_2:20002,store_node_3:20003
    ports:
      - "12349:12349"
    networks:
      - my_distributed_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import socket; s=socket.socket(); s.settimeout(2); s.connect(('localhost', 12349)); s.close()"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 20s
    depends_on: 
      store_node_1:
        condition: service_healthy
      store_node_2:
        condition: service_healthy
      store_node_3:
        condition: service_healthy

  # --- Serviços do Cliente ---

  client_1:
    build: ./client_app # Usando a imagem do Cliente
    hostname: client_1 # Nome do host para o primeiro cliente
    environment:
      CLIENT_ID: Client_A # ID do cliente
      CLUSTER_SYNC_HOST: sync_peer_1 # Host do peer de sincronização inicial
      CLUSTER_SYNC_PORT: 12345 # Porta do peer de sincronização inicial
      CLUSTER_PEERS_LIST: "sync_peer_1:12345,sync_peer_2:12346,sync_peer_3:12347,sync_peer_4:12348,sync_peer_5:12349" # Lista completa de todos os peers para failover
      PYTHONUNBUFFERED: 1 # Variável de ambiente para garantir que a saída do Python seja exibida em tempo real
    depends_on: # Dependências para garantir que os peers estejam saudáveis antes de iniciar o cliente, verifica se todos os peers estão saudáveis
      sync_peer_1:
        condition: service_healthy
      sync_peer_2:
        condition: service_healthy
      sync_peer_3:
        condition: service_healthy
      sync_peer_4:
        condition: service_healthy
      sync_peer_5:
        condition: service_healthy
    networks:
      - my_distributed_net # Conectando ao network bridge
    restart: on-failure # Reiniciar o serviço em caso de falha


  client_2:
    build: ./client_app
    hostname: client_2
    environment:
      CLIENT_ID: Client_B
      CLUSTER_SYNC_HOST: sync_peer_2
      CLUSTER_SYNC_PORT: 12346
      CLUSTER_PEERS_LIST: "sync_peer_1:12345,sync_peer_2:12346,sync_peer_3:12347,sync_peer_4:12348,sync_peer_5:12349"
      PYTHONUNBUFFERED: 1
    depends_on:
      sync_peer_1:
        condition: service_healthy
      sync_peer_2:
        condition: service_healthy
      sync_peer_3:
        condition: service_healthy
      sync_peer_4:
        condition: service_healthy
      sync_peer_5:
        condition: service_healthy
    networks:
      - my_distributed_net
    restart: on-failure


  client_3:
    build: ./client_app
    hostname: client_3
    environment:
      CLIENT_ID: Client_c
      CLUSTER_SYNC_HOST: sync_peer_3
      CLUSTER_SYNC_PORT: 12347
      CLUSTER_PEERS_LIST: "sync_peer_1:12345,sync_peer_2:12346,sync_peer_3:12347,sync_peer_4:12348,sync_peer_5:12349"
      PYTHONUNBUFFERED: 1
    depends_on:
      sync_peer_1:
        condition: service_healthy
      sync_peer_2:
        condition: service_healthy
      sync_peer_3:
        condition: service_healthy
      sync_peer_4:
        condition: service_healthy
      sync_peer_5:
        condition: service_healthy
    networks:
      - my_distributed_net
    restart: on-failure


  client_4:
    build: ./client_app
    hostname: client_4
    environment:
      CLIENT_ID: Client_d
      CLUSTER_SYNC_HOST: sync_peer_4
      CLUSTER_SYNC_PORT: 12348
      CLUSTER_PEERS_LIST: "sync_peer_1:12345,sync_peer_2:12346,sync_peer_3:12347,sync_peer_4:12348,sync_peer_5:12349"
      PYTHONUNBUFFERED: 1
    depends_on:
      sync_peer_1:
        condition: service_healthy
      sync_peer_2:
        condition: service_healthy
      sync_peer_3:
        condition: service_healthy
      sync_peer_4:
        condition: service_healthy
      sync_peer_5:
        condition: service_healthy
    networks:
      - my_distributed_net
    restart: on-failure


  client_5:
    build: ./client_app
    hostname: client_5
    environment:
      CLIENT_ID: Client_e
      CLUSTER_SYNC_HOST: sync_peer_5
      CLUSTER_SYNC_PORT: 12349
      CLUSTER_PEERS_LIST: "sync_peer_1:12345,sync_peer_2:12346,sync_peer_3:12347,sync_peer_4:12348,sync_peer_5:12349"
      PYTHONUNBUFFERED: 1
    depends_on:
      sync_peer_1:
        condition: service_healthy
      sync_peer_2:
        condition: service_healthy
      sync_peer_3:
        condition: service_healthy
      sync_peer_4:
        condition: service_healthy
      sync_peer_5:
        condition: service_healthy
    networks:
      - my_distributed_net
    restart: on-failure

networks: # Definindo a rede bridge personalizada
  my_distributed_net: #
    driver: bridge # Usando o driver bridge para criar uma rede personalizada